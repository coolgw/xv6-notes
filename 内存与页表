va: 虚拟地址
//   39..63 -- must be zero.
//   30..38 -- 9 bits of level-2 index.
//   21..29 -- 9 bits of level-1 index.
//   12..20 -- 9 bits of level-0 index.
//    0..11 -- 12 bits of byte offset within the page.

pa: 物理地址
pte: 指向pte的指针
*pte: pte内容,或者说是pte entry
pagetable：指向pagetabel的指针

当拿到一个虚拟地址va的时候，把虚拟地址分成3块，每块内容是一个偏移量
申请一块物理内存，把这块物理内存的地址给root——pagetable，也就是root页表地址，然后取虚拟地址的第一块偏移1st_offset，root_pagetable+1st_offset*8这个
地址就是指向第一个pte, *pte内容开始是空的(他需要指向下一级的pagetable)，这时候就需要申请第二块物理内存pa2，然后把这块物理内存
的地址放到*pte，注意不是把pa2直接放到*pte,而是pa2>>12 <<10之后的值给*pte

Let's go through gdb with walk function:

(gdb) p va
$9 = 268435456
(gdb) p/x va
$10 = 0x10000000
91      // Look up a virtual address, return the physical address,
92      // or 0 if not mapped.
93      // Can only be used to look up user pages.
94      uint64
95      walkaddr(pagetable_t pagetable, uint64 va)
96      {
97        pte_t *pte;
(gdb) p pagetable 
$1 = (pagetable_t) 0x87fff000  root_pagetable的首地址,这是分配的第一块物理内存地址
(gdb) n
74        if(va >= MAXVA)
(gdb)
78          pte_t *pte = &pagetable[PX(level, va)]; va是0x1000 0000， 取30..38位，值是0，所以就是表头偏移0位置就是要更新的*pte
(gdb)
79          if(*pte & PTE_V) {
(gdb) p *pte   此时没有内容，说明虚拟内存没有被映射过，所以要开始设置
$2 = 0
(gdb) p pte
$3 = (pte_t *) 0x87fff000
(gdb) n
79          if(*pte & PTE_V) {
(gdb)
82            if(!alloc || (pagetable = (pde_t*)kalloc()) == 0)
(gdb)
84            memset(pagetable, 0, PGSIZE);
(gdb) p pagetable
$4 = (pagetable_t) 0x87ffe000  这就是分配的第二块内存
(gdb) n
85            *pte = PA2PTE(pagetable) | PTE_V;
(gdb)
77        for(int level = 2; level > 0; level--) {

(gdb) x /20xw 0x87fff000   root pagetable位置，第一项就是30..38位偏移地方（0），里面存放了第二次申请的物理地址pa>>12 <<10
0x87fff000:     0x21fff801      0x00000000      0x00000000      0x00000000
0x87fff010:     0x00000000      0x00000000      0x00000000      0x00000000
0x87fff020:     0x00000000      0x00000000      0x00000000      0x00000000
0x87fff030:     0x00000000      0x00000000      0x00000000      0x00000000
0x87fff040:     0x00000000      0x00000000      0x00000000      0x00000000

第二轮循环，level=1,开始找下一级表
(gdb) n
78          pte_t *pte = &pagetable[PX(level, va)];
(gdb) p pagetable
$6 = (pagetable_t) 0x87ffe000  这是二级表头地址
(gdb) n
79          if(*pte & PTE_V) {
(gdb) p pte
$7 = (pte_t *) 0x87ffe400 二级表中的偏移地址 pte = 二级表头地址 + offset*8 ,offset值取va的(21..29)值为0x80, 就是0x87ffe000[0x80],数组的每个元素都是64bit的指针，所以换算地址就是
0x87ffe000 + 0x80*8(16进制换算就是0x80<<3=0x400) = 0x87ffe400

NOTE:内存单元是以byte为最小颗粒，所以64bit就是8个byte
同样，这个*pte是没有被创建的，依旧走分配新物理内存的流程，并把新物理内存的值放到*pte里面去

(gdb) n
82            if(!alloc || (pagetable = (pde_t*)kalloc()) == 0)
(gdb)
84            memset(pagetable, 0, PGSIZE);
(gdb) p pagetable
$8 = (pagetable_t) 0x87ffd000  
(gdb) n
85            *pte = PA2PTE(pagetable) | PTE_V;
(gdb) n
77        for(int level = 2; level > 0; level--) {
(gdb) x /20xw 0x87ffe400
0x87ffe400:     0x21fff401      0x00000000      0x00000000      0x00000000
0x87ffe410:     0x00000000      0x00000000      0x00000000      0x00000000
0x87ffe420:     0x00000000      0x00000000      0x00000000      0x00000000
0x87ffe430:     0x00000000      0x00000000      0x00000000      0x00000000
0x87ffe440:     0x00000000      0x00000000      0x00000000      0x00000000
(gdb)




======================================
void freerange(void *pa_start, void *pa_end);

extern char end[]; // first address after kernel.
                   // defined by kernel.ld.
这个end是kernel.ld里面的一个label,大致意思就是kernel代码段，数据段末尾结束时的一个地址，这里是物理地址
这样好处是end是可以跟者代码数据端变化而变化。
因此kernel部分加载后大片的空余空间就是end->PHYSTOP

struct run {
  struct run *next;
};

struct {
  struct spinlock lock;
  struct run *freelist;
} kmem;
kmem就是个头，这个头有个锁和指向了个指针链表，每个链表里面都是地址，每个地址都指向一个4K的空间，也就是剩余的物理空间的所有地址
被切割成了4K大小的块，每块的地址都被freelist给记录下来了
void
kinit()
{
  initlock(&kmem.lock, "kmem");
  freerange(end, (void*)PHYSTOP); //这个freerange其实就是在建立整个空间能够用的物理地址块
}

void
freerange(void *pa_start, void *pa_end)
{
  char *p;
  p = (char*)PGROUNDUP((uint64)pa_start);
  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE)
    kfree(p);  //这个不要被free欺骗，其实在系统初始阶段是用来创建空闲物理块列表
}

// Free the page of physical memory pointed at by v,
// which normally should have been returned by a
// call to kalloc().  (The exception is when
// initializing the allocator; see kinit above.)
void
kfree(void *pa)
{
  struct run *r;

  if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
    panic("kfree");

  // Fill with junk to catch dangling refs.
  memset(pa, 1, PGSIZE);

  r = (struct run*)pa;

  acquire(&kmem.lock);
  r->next = kmem.freelist;
  kmem.freelist = r;
  release(&kmem.lock);
}

=====
// Return the address of the PTE in page table pagetable
// that corresponds to virtual address va.  If alloc!=0,
// create any required page-table pages.
//
// The risc-v Sv39 scheme has three levels of page-table
// pages. A page-table page contains 512 64-bit PTEs.
// A 64-bit virtual address is split into five fields:
//   39..63 -- must be zero.
//   30..38 -- 9 bits of level-2 index.
//   21..29 -- 9 bits of level-1 index.
//   12..20 -- 9 bits of level-0 index.
//    0..11 -- 12 bits of byte offset within the page.
pte_t *
walk(pagetable_t pagetable, uint64 va, int alloc)
{
  if(va >= MAXVA)
    panic("walk");

  for(int level = 2; level > 0; level--) {   
    pte_t *pte = &pagetable[PX(level, va)];   //这里pagetable是一个页表root的地址, PX(level, va)取值就是取虚拟地址va 的30..38位，也就是level-2 index的值，
    //然后pagetabele[x]就是从pagetable地址偏移x后的一个pte entry,最后把这个entry的地址给了pte这个指针
    if(*pte & PTE_V) {
      pagetable = (pagetable_t)PTE2PA(*pte);
    } else {
      if(!alloc || (pagetable = (pde_t*)kalloc()) == 0) //如果表项还没有建立，那么通过kalloc找一个物理块并返回物理块的地址给pagetable
        return 0;
      memset(pagetable, 0, PGSIZE);
      *pte = PA2PTE(pagetable) | PTE_V; 物理地址pagetable进行PA(物理地址) 2 PTE(页表项）的运算，物理地址>>12（4K） <10（pte末尾10位都是标志位，这样
      做出了一个pte的entry, 并设置V有效，把这个值放到pte所指定的地方，下个循环就从新得到的pagetable开始得到21..29的偏移
    }
  }
  return &pagetable[PX(0, va)];
}



=====
main()
{
  if(cpuid() == 0){
    consoleinit();
    printfinit();
    printf("\n");
    printf("xv6 kernel is booting\n");
    printf("\n");
    kinit();         // physical page allocator
    kvminit();       // create kernel page table
    kvminithart();   // turn on paging  <===
    procinit();      // process table
    trapinit();      // trap vectors

开启分页后，所有地址需要通过页表查询后得到真实的物理地址。kernel空间用kernel page table, user 空间用user page table
kernel空间里面有大部分做的是一一映射，也就是物理地址就是虚拟地址
比如下面代码如何通过地址调用func就是用了虚拟地址，而不是物理地址了。
kernel/trap.c
// jump to trampoline.S at the top of memory, which
  // switches to the user page table, restores user registers,
  // and switches to user mode with sret.
  uint64 fn = TRAMPOLINE + (userret - trampoline);  //这里开始找fn的地址就是用的虚拟地址，也就是kernel page table里面映射TRAMPOLINE.
  ((void (*)(uint64,uint64))fn)(TRAPFRAME, satp);
}
一旦启用了硬件的虚拟地址映射，意味着程序里面用的取地址的操作都会通过页表来转换，下面还有个例子
copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
{
  memmove((void *) dst, (void *)srcva, len); //这里srcva和dst里面代表的地址都会通过页表操作得到实际物理地址来操作，也就是凡是涉及地址操作的都会通过页表来映射
  return 0;


